"use strict";var _slicedToArray=function(r,t){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return function(r,t){var e=[],i=!0,n=!1,o=void 0;try{for(var s,u=r[Symbol.iterator]();!(i=(s=u.next()).done)&&(e.push(s.value),!t||e.length!==t);i=!0);}catch(r){n=!0,o=r}finally{try{!i&&u.return&&u.return()}finally{if(n)throw o}}return e}(r,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},fs=require("fs"),path=require("path"),io=require("./interface"),reWrite=require("./re-write"),getFilesInDirectory=function t(e,i){var r=fs.readdirSync(e);return i=i||[],r.forEach(function(r){fs.statSync(path.join(e,r)).isDirectory()?i=t(path.join(e,r),i):i.push(path.join(e,r))}),i},inflateInput=function(r){return r.map(function(r){return fs.lstatSync(r).isDirectory()?getFilesInDirectory(r):[r]}).reduce(function(r,t){return r.concat(t)},[])};module.exports.getInputAndOutputItems=function(r,t){var e=void 0,i=void 0,n=t.slice(0).pop(),o=fs.existsSync(n)&&fs.statSync(n).isDirectory();(t.length<2&&io.showError("ARG_COUNT_LESS"),r===reWrite.doIt)?(e=inflateInput(t.slice(0,t.length-1)),i=o?path.join(n,"output-file.txt"):n):(2<t.length&&io.showError("ARG_COUNT_MORE"),fs.existsSync(t[0])&&fs.statSync(t[0]).isFile()&&o||io.showError("UNDO_ARGS"),e=_slicedToArray(t,1)[0],i=n);return[e,i]};